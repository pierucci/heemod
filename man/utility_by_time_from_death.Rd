% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utility_by_time_from_death.R
\name{utility_by_time_from_death}
\alias{utility_by_time_from_death}
\alias{utility_by_time_from_death.cycle_counts}
\alias{utility_by_time_from_death.eval_strategy}
\alias{utility_by_time_from_death.run_model}
\title{Calculate utilities based on time before death}
\usage{
utility_by_time_from_death(x, ...)

\method{utility_by_time_from_death}{cycle_counts}(x, util_before_death,
  util_long_before_death, death_state = "Death", discount_rate = 0, ...)

\method{utility_by_time_from_death}{eval_strategy}(x, ...)

\method{utility_by_time_from_death}{run_model}(x, m, ...)
}
\arguments{
\item{x}{an object of of type \code{cycle_counts}, 
\code{eval_model}, or \code{run_models}.  x is either
a matrix of counts for from a model.
(of type \code{cycle_counts}) or an \code{eval_model} or
a \code{run_models} list.}

\item{...}{other arguments to be passed through}

\item{util_before_death}{a matrix with two columns, \code{through_cycle} 
and \code{util}.  From \code{through_cycle[i - 1]} (or 1, for i = 1)
to \code{through_cycle[i+1]} before death, 
an individual will accrue \code{util[i]} units of
utility.}

\item{util_long_before_death}{utility more than 
\code{max(util_before_death[, through_cycle])} cycles before death.}

\item{death_state}{the name of the state representing death.}

\item{discount_rate}{discount rate to be applied to utilities.}

\item{m}{name or number of a model, only if \code{x} is
of type \code{run_models}.}
}
\value{
a vector of utilities, of length \code{nrow(counts)}.
}
\description{
Calculate utilities based on time before death
}
\examples{
ProgFree <- round(1000 * exp(-0.2 * 0:24))
Progressive <- round((1000 - ProgFree) * exp(-0.1 * 0:24))
Death <- 1000 - ProgFree - Progressive
state_names <- rep(c("ProgFree", "Progressive", "Death"), each = 25)

counts <- data.frame(.strategy = rep("s1", 25),
                     markov_cycle = 0:24,
                     state_names = state_names,
                     count = c(ProgFree, Progressive, Death)
)
class(counts) <- c("cycle_counts", class(counts))
aa1 <- data.frame(until_lag = c(1,2,3), util = c(0.1, 0.3, 0.5))
 utility_by_time_from_death(counts, util_before_death = aa1, 
   util_long_before_death = 1)
}

